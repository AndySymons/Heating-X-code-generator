blueprint:
  name: "Heating X"
  description: Controls one or more thermostats from a calendar, allows temporary manual override, and optionally turns off thermostat if a door or window is opened, or if the zone is unoccupied for a while.
  domain: automation

  ### ----------------------------------------------------------------------------
  ### INPUTS
  ### ----------------------------------------------------------------------------

  input:
    thermostat_controls:
      name: DEVICE ENTITY - Thermostat control
      description: One or more thermostat entities that are to be controlled by this automation
      selector:
        entity:
          domain: climate
          multiple: true

    thermostat_set_temperature_sensors:
      name: DEVICE ENTITY - Thermostat set temperature
      description: The (template) sensors that read the set temperature from the specified thermostats
      selector:
        entity:
          domain: sensor
          multiple: true

    door_or_window_open_sensors:
      name: DEVICE ENTITY - Door or window open sensors
      description: Zero or more sensors that detect whether a door or window is open
      selector:
        entity:
          domain: binary_sensor
          device_class: opening
          multiple: true
      default: []

    zone_occupancy_sensors:
      name: DEVICE ENTITY - Zone occupancy sensors
      description: Zero or more sensors that detect whether there is anyone in the zone
      selector:
        entity:
          domain: binary_sensor
          device_class: occupancy
          multiple: true
      default: []

    zone_calendar:
      name: CALENDAR ENTITY - Zone calendar
      description: The calendar dedicated to scheduling events for this zone
      selector:
        entity:
          domain: calendar

    event_name:
      name: HELPER - Event name
      description: The global variable (helper) to hold the name (aka Summary) of the current event (if any)
      selector:
        entity:
          domain: input_text

    event_start:
      name: HELPER - Event start
      description: The global variable (helper) to hold the start date and time of the current event (if any)
      selector:
        entity:
          domain: input_datetime

    event_end:
      name: HELPER - Event end
      description: The global variable (helper) to hold the end date and time of the current event (if any)
      selector:
        entity:
          domain: input_datetime

    event_description:
      name: HELPER - Event description
      description: The global variable (helper) to hold the description of the current event (if any)
      selector:
        entity:
          domain: input_text

    event_temperature:
      name: HELPER - Event temperature
      description: The global variable (helper) to hold the temperature specified in the current event (if any)
      selector:
        entity:
          domain: input_number

    manual_temperature:
      name: HELPER - Manual temperature
      description: The global variable (helper) to hold the temperature specified by manual control of the device or the dashboard
      selector:
        entity:
          domain: input_number

    setting_reason:
      name: HELPER - Setting reason
      description: The global variable (helper) into which the automation writes the reason for the current setting (for use on a dashboard)
      selector:
        entity:
          domain: input_text

    door_or_window_open_timer:
      name: HELPER - Door or window open timer
      description: The global variable (helper) to hold the timer for the period since a door or window was opened
      selector:
        entity:
          domain: timer

    unoccupancy_timer:
      name: HELPER - Unoccupancy timer
      description: The global variable (helper) to hold the timer for the period since the zone was last unoccupied
      selector:
        entity:
          domain: timer

    warmup_timer:
      name: HELPER - Warmup timer
      description: The global variable (helper) to hold the timer for the event warmup period
      selector:
        entity:
          domain: timer

    manual_override_timer:
      name: HELPER - Manual override timer
      description: The global variable (helper) to hold the timer for a manual intervention
      selector:
        entity:
          domain: timer

    echoblock_timer:
      name: HELPER - Echoblock timer
      description: The timer for use inside the automation to disinguish genuine manual changes of the set temperature from those set by the automation
      selector:
        entity:
          domain: timer

    minimum_thermostat_temperature:
      name: PARAMETER - Minimum thermostat temperature
      description: The minimum temperature that can be set on the thermostat
      selector:
        number:
          min: 0
          max: 100
      default: 5

    maximum_thermostat_temperature:
      name: PARAMETER - Maximum thermostat temperature
      description: The maximum temperature that can be set on the thermostat
      selector:
        number:
          min: 0
          max: 100
      default: 95

    frost_setting:
      name: PARAMETER - Frost setting
      description: The temperature to be used when the heating is turned off
      selector:
        number:
          min: 0
          max: 100
      default: 5

    warmup_period:
      name: PARAMETER - Warmup period
      description: The period of time from the start of a new event for which zone unoccupancy will be ignored
      selector:
        time:
      default: "02:00:00"

    manual_override_period:
      name: PARAMETER - Manual override period
      description: The time period for which a manual intervention will override the schedule
      selector:
        time:
      default: "02:00:00"

    door_or_window_open_period:
      name: PARAMETER - Door or window open period
      description: The time period for which a door or window may be open before the heating is turned off
      selector:
        time:
      default: "0:03:00"

    unoccupancy_period:
      name: PARAMETER - Unoccupancy period
      description: The time period for which the zone may be unoccupied before the heating is turned off
      selector:
        time:
      default: "01:00:00"

mode: queued # use all triggers but avoid conflicting states

## ----------------------------------------------------------------------------
## LOCAL VARIABLES
## needed to capture global variable values for use in templates
## ----------------------------------------------------------------------------

variables:
  local_door_or_window_open_sensors: !input door_or_window_open_sensors
  local_event_description: !input event_description
  local_event_name: !input event_name
  local_event_temperature: !input event_temperature
  local_frost_setting: !input frost_setting
  local_manual_temperature: !input manual_temperature
  local_manual_override_timer: !input manual_override_timer
  local_maximum_thermostat_temperature: !input maximum_thermostat_temperature
  local_minimum_thermostat_temperature: !input minimum_thermostat_temperature
  local_thermostat_set_temperature: '{{ trigger.entity_id | default("unknown") }}'
  local_zone_calendar: !input zone_calendar
  local_zone_occupancy_sensors: !input zone_occupancy_sensors

## ----------------------------------------------------------------------------
## TRIGGERS
## ----------------------------------------------------------------------------

trigger:
  # 1. Calendar event starts
  - platform: calendar
    event: start
    entity_id: !input zone_calendar
    id: calendar_event_start

  # 2. Calendar event ends
  - platform: calendar
    event: end
    entity_id: !input zone_calendar
    id: calendar_event_end

  # 3. Change in any one of the thermostat set temperatures
  - platform: state
    entity_id: !input thermostat_set_temperature_sensors
    attribute: temperature
    for:
      seconds: 10
    id: set_temperature_change

  # 4. End of manual override (timer idle, paused, unknown, or unavailable)
  - platform: event
    event_type:
      - timer.finished
      - timer.cancelled
    event_data:
      entity_id: !input manual_override_timer
    id: manual_override_end

  # 5. Zone becomes unoccupied: sensor available and off (clear)
  - platform: state
    entity_id: !input zone_occupancy_sensors
    to: "off"
    for:
      seconds: 10
    id: zone_unoccupied

  # 6. Zone becomes occupied: sensor 'detected' (on), 'unknown', or 'unavailable'
  - platform: state
    entity_id: !input zone_occupancy_sensors
    from: "off"
    for:
      seconds: 10
    id: zone_occupied

  # 7. A door or window is opened
  - platform: state
    entity_id: !input door_or_window_open_sensors
    to: "on"
    for:
      seconds: 10
    id: door_or_window_opened

  # 8. A doors or windows is closed, or becomes 'unknown' or 'unavailable'
  - platform: state
    entity_id: !input door_or_window_open_sensors
    from: "on"
    for:
      seconds: 10
    id: doors_and_windows_closed

  # 9. Door or window open timer finished (time to turn off the heating)
  - platform: state
    entity_id: !input door_or_window_open_timer
    from: active
    id: door_or_window_open_timer_end

  # 10. Unoccupancy timer finished (time to turn off the heating)
  - platform: state
    entity_id: !input unoccupancy_timer
    from: active
    id: unoccupancy_timer_end

  # 13. Refresh every minute
  - platform: time_pattern
    seconds: "02" # after the now() time is set at seconds 00

## ----------------------------------------------------------------------------
## ACTIONS STEP 1 -- SET THE STATE VARÄ°ABLES
## ----------------------------------------------------------------------------

action:
  - choose:
      #
      # a. Manual override start
      #
      - conditions:
          - condition: trigger
            id: set_temperature_change
          #ignore if it is just an echo from a setting from this automation
          - condition: state
            entity_id: !input echoblock_timer
            state: idle
          #ignore if same value as before (e.g. triggered by template reload)
          - condition: template
            value_template: "{{ not states(local_thermostat_set_temperature) == states(local_manual_temperature) }}"
        sequence:
          - service: timer.start
            data:
              duration: !input manual_override_period
            target:
              entity_id: !input manual_override_timer

          # Save the manual setting most recently received (this trigger)
          - service: input_number.set_value
            data:
              value: "{{ states(local_thermostat_set_temperature) }}"
            target:
              entity_id: !input manual_temperature
      #
      # b. Manual override end
      #
      - conditions:
          - condition: trigger
            id: manual_override_end
        sequence:
          - service: input_number.set_value
            data:
              value: 0  # This value should never be used to set the thermostat.
            target:
              entity_id: !input manual_temperature
      #
      # c. Door or window opened - start timer
      #
      - conditions:
          - condition: trigger
            id: door_or_window_opened
            # Do not restart timer if already running
          - condition: not
            conditions:
              - condition: state
                entity_id: !input door_or_window_open_timer
                state: active
        sequence:
          - service: timer.start
            data:
              duration: !input door_or_window_open_period
            target:
              entity_id: !input door_or_window_open_timer
      #
      # d. Doors and windows closed - restart and pause timer
      #
      - conditions:
          - condition: trigger
            id: doors_and_windows_closed
        sequence:
          - service: timer.start
            data:
              duration: !input door_or_window_open_period
            target:
              entity_id: !input door_or_window_open_timer
          - service: timer.pause # Keeps it in the active state
            target:
              entity_id: !input door_or_window_open_timer
      #
      # e. Unoccupancy - start timer
      #
      - conditions:
          - condition: trigger
            id: zone_unoccupied
            # Do not restart timer if already running
          - condition: not
            conditions:
              - condition: state
                entity_id: !input unoccupancy_timer
                state: active
        sequence:
          - service: timer.start
            data:
              duration: !input unoccupancy_period
            target:
              entity_id: !input unoccupancy_timer
      #
      # f. Zone occupied - restart and pause timer
      #
      - conditions:
          - condition: trigger
            id: zone_occupied
        sequence:
          - service: timer.start
            data:
              duration: !input unoccupancy_period
            target:
              entity_id: !input unoccupancy_timer
          - service: timer.pause # Keeps it in the active state
            target:
              entity_id: !input unoccupancy_timer

  ## ----------------------------------------------------------------------------
  ## ACTIONS STEP 2 -- REFRESH THE CALENDAR EVENT HELPERS
  ## ----------------------------------------------------------------------------

  - if:
      - condition: template
        value_template: |
          {{ states(local_zone_calendar) == 'on' }}
    then:
      - service: input_text.set_value
        data:
          value: "{{ state_attr(local_zone_calendar, 'message' ) }}"
        target:
          entity_id: !input event_name
      - service: input_datetime.set_datetime
        data:
          datetime: "{{ state_attr(local_zone_calendar, 'start_time' ) }}"
        target:
          entity_id: !input event_start
      - service: input_datetime.set_datetime
        data:
          datetime: "{{ state_attr(local_zone_calendar, 'end_time' ) }}"
        target:
          entity_id: !input event_end
      - service: input_text.set_value
        data:
          value: "{{ state_attr(local_zone_calendar, 'description' ) }}"
        target:
          entity_id: !input event_description
      - service: input_number.set_value
        data:
          value: >-
            {% set description = state_attr(local_zone_calendar, 'description' ) %} {# copy description field #}
            {% if not description.split('#') | count >= 3 %}
            {% set temperature_error_code = -4 %} {# no number field #}
            {% elif not description.split('#')[1] | is_number %}
            {% set temperature_error_code = -3 %} {# not a number #}
            {% elif not (description.split('#')[1] | float(0)) >= local_minimum_thermostat_temperature %}
            {% set temperature_error_code = -2 %} {# number too small #}
            {% elif not (description.split('#')[1] | float(0)) <= local_maximum_thermostat_temperature %}
            {% set temperature_error_code = -1 %} {# number too big #}

            {% else %}
            {% set temperature_error_code = 0 %}
            {% endif %}
            {% if temperature_error_code == 0 %}
              {{ '%0.1f' | format(description.split('#')[1]  | float(0)) }}
            {% else %}
              {{ local_frost_setting }}
            {% endif %}

        target:
          entity_id: !input event_temperature

    else: # no  currently active event
      - service: input_text.set_value
        data:
          value: (none)
        target:
          entity_id: !input event_name
      - service: input_datetime.set_datetime
        data:
          datetime: "3000-01-01T00:00:00"
        target:
          entity_id: !input event_start
      - service: input_datetime.set_datetime
        data:
          datetime: "3000-01-01T00:00:00"
        target:
          entity_id: !input event_end
      - service: input_text.set_value
        data:
          value: (none)
        target:
          entity_id: !input event_description
      - service: input_number.set_value
        data:
          value: !input frost_setting
        target:
          entity_id: !input event_temperature

  ## ----------------------------------------------------------------------------
  ## ACTIONS STEP 3 -- DETERMINE THE REQUIRED TEMPERATURE AND THE REASON
  ## ----------------------------------------------------------------------------

  - choose:
      # 1. If a door or window has been open for the set period, turn the heating off
      - conditions:
          - condition: state
            entity_id: !input door_or_window_open_timer
            state: idle
          - condition: template
            value_template: "{{ local_door_or_window_open_sensors | select ('is_state', 'on') | list | count > 0 }}"
        sequence:
          - service: climate.set_temperature
            data:
              temperature: !input frost_setting
            target:
              entity_id: !input thermostat_controls
          - service: input_text.set_value
            data:
              value: "Turned off because a door or window is open"
            target:
              entity_id: !input setting_reason

      # 2. If the zone has been unoccupied for the set period, turn the heating off
      - conditions:
          - condition: state
            entity_id: !input unoccupancy_timer
            state: idle
          - condition: template
            value_template: "{{ local_zone_occupancy_sensors | reject ('is_state', [ 'unknown',  'unavailable' ] ) | select ('is_state', 'on') | list | count > 0 }}"
        sequence:
          - service: climate.set_temperature
            data:
              temperature: !input frost_setting
            target:
              entity_id: !input thermostat_controls
          - service: input_text.set_value
            data:
              value: "Turned off because the zone is unoccupied"
            target:
              entity_id: !input setting_reason

      # 3. If there is a manual override in operation
      - conditions:
          - condition: state
            entity_id: !input manual_override_timer
            state: active
        sequence:
          - service: climate.set_temperature
            data:
              temperature: "{{ states(local_manual_temperature) }}"
            target:
              entity_id: !input thermostat_controls
          - service: input_text.set_value
            data:
              value: "Set manually to {{ states(local_manual_temperature) }}. Time left {{ ( as_timestamp(state_attr(local_manual_override_timer,'finishes_at'))-as_timestamp(now()) ) |  timestamp_custom('%H:%M', False, 0) }}"
            target:
              entity_id: !input setting_reason

      # 4.1 If there is an active calendar event with no temperature field
      - conditions:
          - condition: state
            entity_id: !input zone_calendar
            state: "on"
          - condition: template
            value_template: >-
              {{ not states(local_event_description).split('#') | count >= 3 }}
        sequence:
          - service: climate.set_temperature
            data:
              temperature: !input frost_setting
            target:
              entity_id: !input thermostat_controls
          - service: input_text.set_value
            data:
              value: >-
                {{ "Turned off because the calendar event '" + states(local_event_name) + "' does not specify a temperature." }}
            target:
              entity_id: !input setting_reason

      # 4.2 If there is an active calendar event with a temperature field that is not a number
      - conditions:
          - condition: state
            entity_id: !input zone_calendar
            state: "on"
          - condition: template
            value_template: >-
              {{ not states(local_event_description).split('#')[1] | is_number }}
        sequence:
          - service: climate.set_temperature
            data:
              temperature: !input frost_setting
            target:
              entity_id: !input thermostat_controls
          - service: input_text.set_value
            data:
              value: >-
                {{ "Turned off because the calendar event '" + states(local_event_name) + "' does not specify a valid number for the temperature." }}
            target:
              entity_id: !input setting_reason

      # 4.3 If there is an active calendar event with a temperature that is too low
      - conditions:
          - condition: state
            entity_id: !input zone_calendar
            state: "on"
          - condition: template
            value_template: >-
              {{ not (states(local_event_description).split('#')[1] | float(0)) >= local_minimum_thermostat_temperature }}
        sequence:
          - service: climate.set_temperature
            data:
              temperature: !input frost_setting
            target:
              entity_id: !input thermostat_controls
          - service: input_text.set_value
            data:
              value: >-
                {{ "Turned off because the calendar event '" + states(local_event_name) + "' specifies a temperature below the minimum." }}
            target:
              entity_id: !input setting_reason

      # 4.4 If there is an active calendar event with a temperature that is too high
      - conditions:
          - condition: state
            entity_id: !input zone_calendar
            state: "on"
          - condition: template
            value_template: >-
              {{ not (states(local_event_description).split('#')[1] | float(0)) <= local_maximum_thermostat_temperature }}
        sequence:
          - service: climate.set_temperature
            data:
              temperature: !input frost_setting
            target:
              entity_id: !input thermostat_controls
          - service: input_text.set_value
            data:
              value: >-
                {{ "Turned off because the calendar event '" + states(local_event_name) + "' specifies a temperature above the maximum." }}
            target:
              entity_id: !input setting_reason

      # 4.5 (Else) if there is an active calendar event with a valid temperature
      - conditions:
          - condition: state
            entity_id: !input zone_calendar
            state: "on"
        sequence:
          - service: climate.set_temperature
            data:
              temperature: "{{ states(local_event_temperature) }}"
            target:
              entity_id: !input thermostat_controls
          - service: input_text.set_value
            data:
              value: >-
                {{ "Set to " +  states(local_event_temperature) + " by calendar event '" + states(local_event_name) + "' until " + ( as_timestamp(state_attr(local_zone_calendar, 'end_time'))  ) |  timestamp_custom('%a %d %b %Y at %H:%M') + "." }}
            target:
              entity_id: !input setting_reason

      # 5. If there is a calendar but no active calendar event
      - conditions:
          - condition: state
            entity_id: !input zone_calendar
            state: "off"
        sequence:
          - service: climate.set_temperature
            data:
              temperature: !input frost_setting
            target:
              entity_id: !input thermostat_controls
          - service: input_text.set_value
            data:
              value: >-
                {{ "Turned off because nothing is scheduled."}}
                {% if state_attr(local_zone_calendar, 'message') %}
                {{ "The next event is '" + state_attr(local_zone_calendar, 'message') + "' " + ( as_timestamp(state_attr(local_zone_calendar, 'start_time')) )  |  timestamp_custom('on %a %d %b %Y at %H:%M')}}
                {% else %}
                {{ "There are no future events." }}
                {% endif %}
            target:
              entity_id: !input setting_reason

      #6. If the calendar state becomes unknown
      - conditions:
          - condition: state
            entity_id: !input zone_calendar
            state: unknown
        sequence:
          - service: climate.set_temperature
            data:
              temperature: !input frost_setting
            target:
              entity_id: !input thermostat_controls
          - service: input_text.set_value
            data:
              value: Turned off because the calendar state is unknown
            target:
              entity_id: !input setting_reason

      #7. If the calendar becomes unavailable
      - conditions:
          - condition: state
            entity_id: !input zone_calendar
            state: unavailable
        sequence:
          - service: climate.set_temperature
            data:
              temperature: !input frost_setting
            target:
              entity_id: !input thermostat_controls
          - service: input_text.set_value
            data:
              value: Turned off because the calendar is unavailable
            target:
              entity_id: !input setting_reason

    # Default - should never happen!
    default:
      - service: climate.set_temperature
        data:
          temperature: !input frost_setting
        target:
          entity_id: !input thermostat_controls
      - service: input_text.set_value
        data:
          value: Turned off by default
        target:
          entity_id: !input setting_reason

  ## ----------------------------------------------------------------------------
  ## ACTIONS STEP 4 -- ECHO-BLOCK TIMER
  ## ----------------------------------------------------------------------------

  - service: timer.start
    data:
      duration:
        seconds: 20
    target:
      entity_id: !input echoblock_timer
